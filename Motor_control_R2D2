#include <PS4BT.h>
#include <usbhub.h>
#include <Servo.h>
#ifdef dobogusinclude
#include <spi4teensy3.h>
#include <SPI.h>
#endif
USB Usb;
BTD Btd(&Usb); 
PS4BT PS4(&Btd, PAIR); // Connexion de la manette avec les boutons Share et PS
Servo ESC;      // Déclaration de l'ESC comme un servomoteur

int esc_value = 1500;
int left_y = 127;

void setup() {
 ESC.attach(7); //utilisation d'une Pin PWM   
 ESC.writeMicroseconds(esc_value);
 Serial.begin(115200);
#if !defined(__MIPSEL__)
  while (!Serial); 
#endif
  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); 
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
}

void loop() {
 Usb.Task();
if (PS4.connected()) {
    if (PS4.getAnalogHat(LeftHatY) > 137 || PS4.getAnalogHat(LeftHatY) < 117){
      Serial.print(F("\tLeftHatY: "));
      Serial.print(PS4.getAnalogHat(LeftHatY));
      left_y = 255 - PS4.getAnalogHat(LeftHatY);
      esc_value = map(left_y, 0, 255, 1000, 2000); // La vitesse varie 
      Serial.println(esc_value);                  //en fonction de 
                                                  //la position du joystick gauche
                                                  // sur un axe Y
      } else {
      esc_value = 1500; // Valeur arrêt moteur 
      }
      ESC.writeMicroseconds(esc_value);
      }
      if (PS4.getButtonClick(PS)) { // Déconnexion et 
                                    //reconnexion de la manette avec le bouton PS
      Serial.print(F("\r\nPS"));
      PS4.disconnect();
    }
  }
